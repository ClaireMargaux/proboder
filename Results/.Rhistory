library(numDeriv) # for jacobian()
library(matrixcalc) # for svd.inverse()
library(ggplot2) # for ggplot()
# Choose data to be imported (in case 'real': date-S-I-D, in case 'simulated': date-S-I-R)
directory_data <- "~/Documents/GitHub/proboder/Data" # directory of data
type <- 'simulated' # set 'real' for real data, 'simulated' for simulated data
region <- 'BE' # 'BE' or 'GE' available (if 'real' data selected)
daily_or_weekly <- 'weekly' # choose either 'daily' or 'weekly' (if 'real' data selected)
# Set model type
model <- if(type == 'simulated'){"SIR"}else{"SID"}
# Import data
data <- load_data(type,region,daily_or_weekly,directory_data)
obs <- data$observations
pop <- data$population
if(type == 'simulated'){
real_beta <- data$real_beta
}
# Sanity check.
head(obs)
summary(obs)
#####################################
########## INITIALIZATION ###########
#####################################
# Fixed parameters
gamma <- 0.4   # Recovery rate
eta <- 0       # Fatality rate
l <- 8         # Length scale
# Initialize latent parameter (contact rate) and its first derivative
beta0 <- 0.99 # Initial value for contact rate, has to be in (0,1)
U <- as.vector(c(
logit(beta0), # Initial value for contact rate rescaled to the real line
-logit(beta0)) # Initial value for 1st derivative
)
# Initialize solution of SIRD-ODE and its two first derivatives
X0 <- c(obs[1,2], obs[1,3], 0, 0) # Initial values for S, I, and R or D
X1 <- f(X0, beta0, pop, gamma, eta) # Initial values for 1st derivatives
X2 <- diag(jacobian_f(X0, beta0, pop, gamma, eta)) # Initial values for 2nd derivatives
X <- as.vector(c(X0,X1,X2))
# Drift matrices
F_U <- matrix(c(0,-(sqrt(3)/l)^2,1,-2*sqrt(3)/l), nrow = 2, ncol = 2)
F_X <- as.matrix(sparseMatrix(i = 1:8, j = 5:12, x = 1, dims = c(12,12)))
# Dispersion matrices
L_U <- matrix(c(0,1), nrow = 2, ncol = 1)
L_X <- as.matrix(sparseMatrix(i = 9:12, j = 1:4, x = 1, dims = c(12,4)))
# Observation matrix (for observation of S,I, and R or D)
if(model == 'SID'){
H <- as.matrix(sparseMatrix(i = c(1,2,3), j = c(1,2,4), x = 1, dims = c(3,14)))
}else if(model == 'SIR'){
H <- as.matrix(sparseMatrix(i = c(1,2,3), j = c(1,2,3), x = 1, dims = c(3,14)))
}else{
print('Wrong model type!')
}
# Observation noise
R <- cov(obs[,-1])
# Noise of priors
P_U <- matrix(0, nrow = 2, ncol = 2)
P_X <- matrix(0, nrow = 12, ncol = 12)
# Noise of Wiener process
noise_wiener_U <- diag(0.01, nrow = ncol(L_U), ncol = ncol(L_U))
noise_wiener_X <- diag(0.01, nrow = ncol(L_X), ncol = ncol(L_X))
#####################################
############# ALGORITHM #############
#####################################
# Data grid
data_grid <- obs[,'date']
# ODE grid
ode_grid <- data_grid # no more points than observations
# Overall time grid
time_grid <- sort(unique(c(data_grid, ode_grid)))
# Run inference.
inference_results <- inference(time_grid, obs,
X, U, P_X, P_U,
F_X, F_U, L_X, L_U,
noise_wiener_X, noise_wiener_U,
H, pop, gamma, eta)
X_values <- inference_results$X_values
U_values <- inference_results$U_values
P_X_values <- inference_results$P_X_values
P_U_values <- inference_results$P_U_values
# ------------
# Save results
# ------------
# Specify directory for results
directory_res = "~/Documents/GitHub/proboder/Results"
# Save results to the specified directory
save_results_as_Rdata(X_values, U_values, P_X_values, P_U_values, directory_res)
#####################################
########### VISUALIZATION ###########
#####################################
# ---------------------
# Extract relevant data
# ---------------------
# Load and process data from the specified directory
processed_data <- load_and_process_data(directory_res,time_grid)
U_plot <- processed_data$U_plot
P_plot <- processed_data$P_plot
ymin <- P_plot$ymin
ymax <- P_plot$ymax
U_scaled <- processed_data$U_scaled
Xval <- processed_data$Xval
# Save processed data to the specified directory
save_processed_data(U_plot, P_plot, ymin, ymax, U_scaled, Xval, directory_res)
# Create data frame for real beta values (if available)
if(type=='simulated'){
real_beta_df <- data.frame(time = data_grid, real_beta = real_beta)
}
# --------
# Plotting
# --------
setwd(directory_res)
# Plot data
pdf("SIR-counts.pdf")
plot_data(obs,Xval,model)
dev.off()
plot_data(obs,Xval,model)
# Plot contact rate
pdf("contact-rate-with-CI.pdf")
plot_contact_rate(type, U_plot, ymin, ymax, U_scaled, real_beta_df, gamma, eta, l)
dev.off()
plot_contact_rate(type, U_plot, ymin, ymax, U_scaled, real_beta_df, gamma, eta, l)
logit(beta0)
#################################### PROBODER ##################################
################################ Claire Descombes ##############################
################################################################################
# Import functions
source('~/Documents/GitHub/proboder/functions_for_inference.R')
source('~/Documents/GitHub/proboder/saving_loading_plotting.R')
# Necessary packages
library(Matrix) # for sparseMatrix()
library(numDeriv) # for jacobian()
library(matrixcalc) # for svd.inverse()
library(ggplot2) # for ggplot()
# Choose data to be imported (in case 'real': date-S-I-D, in case 'simulated': date-S-I-R)
directory_data <- "~/Documents/GitHub/proboder/Data" # directory of data
type <- 'simulated' # set 'real' for real data, 'simulated' for simulated data
region <- 'BE' # 'BE' or 'GE' available (if 'real' data selected)
daily_or_weekly <- 'weekly' # choose either 'daily' or 'weekly' (if 'real' data selected)
# Set model type
model <- if(type == 'simulated'){"SIR"}else{"SID"}
# Import data
data <- load_data(type,region,daily_or_weekly,directory_data)
obs <- data$observations
pop <- data$population
if(type == 'simulated'){
real_beta <- data$real_beta
}
# Sanity check.
head(obs)
summary(obs)
#####################################
########## INITIALIZATION ###########
#####################################
# Fixed parameters
gamma <- 0.4   # Recovery rate
eta <- 0       # Fatality rate
l <- 8         # Length scale
# Initialize latent parameter (contact rate) and its first derivative
beta0 <- 0.99 # Initial value for contact rate, has to be in (0,1)
beta0prime <- - 2.5 # Initial value for the 1st derivative of contact rate, has to be in (0,1)
U <- as.vector(c(
logit(beta0), # Initial value for contact rate rescaled to the real line
beta0prime) # Initial value for 1st derivative
)
# Initialize solution of SIRD-ODE and its two first derivatives
X0 <- c(obs[1,2], obs[1,3], 0, 0) # Initial values for S, I, and R or D
X1 <- f(X0, beta0, pop, gamma, eta) # Initial values for 1st derivatives
X2 <- diag(jacobian_f(X0, beta0, pop, gamma, eta)) # Initial values for 2nd derivatives
X <- as.vector(c(X0,X1,X2))
# Drift matrices
F_U <- matrix(c(0,-(sqrt(3)/l)^2,1,-2*sqrt(3)/l), nrow = 2, ncol = 2)
F_X <- as.matrix(sparseMatrix(i = 1:8, j = 5:12, x = 1, dims = c(12,12)))
# Dispersion matrices
L_U <- matrix(c(0,1), nrow = 2, ncol = 1)
L_X <- as.matrix(sparseMatrix(i = 9:12, j = 1:4, x = 1, dims = c(12,4)))
# Observation matrix (for observation of S,I, and R or D)
if(model == 'SID'){
H <- as.matrix(sparseMatrix(i = c(1,2,3), j = c(1,2,4), x = 1, dims = c(3,14)))
}else if(model == 'SIR'){
H <- as.matrix(sparseMatrix(i = c(1,2,3), j = c(1,2,3), x = 1, dims = c(3,14)))
}else{
print('Wrong model type!')
}
# Observation noise
R <- cov(obs[,-1])
# Noise of priors
P_U <- matrix(0, nrow = 2, ncol = 2)
P_X <- matrix(0, nrow = 12, ncol = 12)
# Noise of Wiener process
noise_wiener_U <- diag(0.01, nrow = ncol(L_U), ncol = ncol(L_U))
noise_wiener_X <- diag(0.01, nrow = ncol(L_X), ncol = ncol(L_X))
#####################################
############# ALGORITHM #############
#####################################
# Data grid
data_grid <- obs[,'date']
# ODE grid
ode_grid <- data_grid # no more points than observations
# Overall time grid
time_grid <- sort(unique(c(data_grid, ode_grid)))
# Run inference.
inference_results <- inference(time_grid, obs,
X, U, P_X, P_U,
F_X, F_U, L_X, L_U,
noise_wiener_X, noise_wiener_U,
H, pop, gamma, eta)
X_values <- inference_results$X_values
U_values <- inference_results$U_values
P_X_values <- inference_results$P_X_values
P_U_values <- inference_results$P_U_values
# ------------
# Save results
# ------------
# Specify directory for results
directory_res = "~/Documents/GitHub/proboder/Results"
# Save results to the specified directory
save_results_as_Rdata(X_values, U_values, P_X_values, P_U_values, directory_res)
#####################################
########### VISUALIZATION ###########
#####################################
# ---------------------
# Extract relevant data
# ---------------------
# Load and process data from the specified directory
processed_data <- load_and_process_data(directory_res,time_grid)
U_plot <- processed_data$U_plot
P_plot <- processed_data$P_plot
ymin <- P_plot$ymin
ymax <- P_plot$ymax
U_scaled <- processed_data$U_scaled
Xval <- processed_data$Xval
# Save processed data to the specified directory
save_processed_data(U_plot, P_plot, ymin, ymax, U_scaled, Xval, directory_res)
# Create data frame for real beta values (if available)
if(type=='simulated'){
real_beta_df <- data.frame(time = data_grid, real_beta = real_beta)
}
# --------
# Plotting
# --------
setwd(directory_res)
# Plot data
pdf("SIR-counts.pdf")
plot_data(obs,Xval,model)
dev.off()
plot_data(obs,Xval,model)
# Plot contact rate
pdf("contact-rate-with-CI.pdf")
plot_contact_rate(type, U_plot, ymin, ymax, U_scaled, real_beta_df, gamma, eta, l)
dev.off()
plot_contact_rate(type, U_plot, ymin, ymax, U_scaled, real_beta_df, gamma, eta, l)
# Import functions
source('~/Documents/GitHub/proboder/initialization')
# Import functions
source('~/Documents/GitHub/proboder/initialization.R')
initial_params <- inizialization(model,
obs,
beta0 = 0.99,
beta0prime = -2.5,
gamma = 0.4,
eta = 0,
l = 8,
pop)
# Import functions
source('~/Documents/GitHub/proboder/initialization.R')
initial_params <- initialization(model,
obs,
beta0 = 0.99,
beta0prime = -2.5,
gamma = 0.4,
eta = 0,
l = 8,
pop)
#' @param model Model type ('SIR' or 'SID').
#' @param obs Data frame with dates and observations of SIR or SID counts.
#' @param beta0 Initial value for contact rate in (0,1).
#' @param beta0prime Initial value for 1st derivative of contact rate.
#' @param gamma Recovery rate.
#' @param eta Fatality rate.
#' @param l Length scale.
#' @param pop Population.
#' @return A list containing initialized parameters and matrices.
#' @export
initialization <- function(model, obs, beta0, beta0prime, gamma = 0, eta = 0, l = 1, pop){
# Initialize latent parameter (contact rate) and its first derivative
U <- as.vector(c(
logit(beta0), # Initial value for contact rate rescaled to the real line
beta0prime) # Initial value for 1st derivative
)
# Initialize solution of SIRD-ODE and its two first derivatives
if(model == 'SIR'){
X0 <- c(obs[1,2], obs[1,3], obs[1,4], 0) # Initial values for S, I, R and D
}if(model == 'SID'){
# Import functions
source('~/Documents/GitHub/proboder/initialization.R')
# Initialize solution of SIRD-ODE and its two first derivatives
if(model == 'SIR'){
X0 <- c(obs[1,2], obs[1,3], obs[1,4], 0) # Initial values for S, I, R and D
}if(model == 'SID'){
# Import functions
source('~/Documents/GitHub/proboder/initialization.R')
initial_params <- initialization(model,
obs,
beta0 = 0.99,
beta0prime = -2.5,
gamma = 0.4,
eta = 0,
l = 8,
pop)
#################################### PROBODER ##################################
################################ Claire Descombes ##############################
################################################################################
# Import functions
source('~/Documents/GitHub/proboder/initialization.R')
source('~/Documents/GitHub/proboder/functions_for_inference.R')
source('~/Documents/GitHub/proboder/saving_loading_plotting.R')
# Necessary packages
library(Matrix) # for sparseMatrix()
library(numDeriv) # for jacobian()
library(matrixcalc) # for svd.inverse()
library(ggplot2) # for ggplot()
# Choose data to be imported (in case 'real': date-S-I-D, in case 'simulated': date-S-I-R)
directory_data <- "~/Documents/GitHub/proboder/Data" # directory of data
type <- 'simulated' # set 'real' for real data, 'simulated' for simulated data
region <- 'BE' # 'BE' or 'GE' available (if 'real' data selected)
daily_or_weekly <- 'weekly' # choose either 'daily' or 'weekly' (if 'real' data selected)
# Set model type
model <- if(type == 'simulated'){"SIR"}else{"SID"}
# Import data
data <- load_data(type,region,daily_or_weekly,directory_data)
obs <- data$observations
pop <- data$population
if(type == 'simulated'){
real_beta <- data$real_beta
}
# Sanity check.
head(obs)
summary(obs)
#####################################
########## INITIALIZATION ###########
#####################################
initial_params <- initialization(model,
obs,
beta0 = 0.99,
beta0prime = -2.5,
gamma = 0.4,
eta = 0,
l = 8,
pop)
#####################################
############# ALGORITHM #############
#####################################
# Data grid
data_grid <- obs[,'date']
# ODE grid
ode_grid <- data_grid # no more points than observations
# Overall time grid
time_grid <- sort(unique(c(data_grid, ode_grid)))
# Run inference.
inference_results <- inference(time_grid, obs, initial_params)
#################################### PROBODER ##################################
################################ Claire Descombes ##############################
################################################################################
# Import functions
source('~/Documents/GitHub/proboder/initialization.R')
source('~/Documents/GitHub/proboder/functions_for_inference.R')
source('~/Documents/GitHub/proboder/saving_loading_plotting.R')
# Necessary packages
library(Matrix) # for sparseMatrix()
library(numDeriv) # for jacobian()
library(matrixcalc) # for svd.inverse()
library(ggplot2) # for ggplot()
# Choose data to be imported (in case 'real': date-S-I-D, in case 'simulated': date-S-I-R)
directory_data <- "~/Documents/GitHub/proboder/Data" # directory of data
type <- 'simulated' # set 'real' for real data, 'simulated' for simulated data
region <- 'BE' # 'BE' or 'GE' available (if 'real' data selected)
daily_or_weekly <- 'weekly' # choose either 'daily' or 'weekly' (if 'real' data selected)
# Set model type
model <- if(type == 'simulated'){"SIR"}else{"SID"}
# Import data
data <- load_data(type,region,daily_or_weekly,directory_data)
obs <- data$observations
pop <- data$population
if(type == 'simulated'){
real_beta <- data$real_beta
}
# Sanity check.
head(obs)
summary(obs)
#####################################
########## INITIALIZATION ###########
#####################################
initial_params <- initialization(model,
obs,
beta0 = 0.99,
beta0prime = -2.5,
gamma = 0.4,
eta = 0,
l = 8,
pop)
#####################################
############# ALGORITHM #############
#####################################
# Data grid
data_grid <- obs[,'date']
# ODE grid
ode_grid <- data_grid # no more points than observations
# Overall time grid
time_grid <- sort(unique(c(data_grid, ode_grid)))
initial_params
#################################### PROBODER ##################################
################################ Claire Descombes ##############################
################################################################################
# Import functions
source('~/Documents/GitHub/proboder/initialization.R')
source('~/Documents/GitHub/proboder/functions_for_inference.R')
source('~/Documents/GitHub/proboder/saving_loading_plotting.R')
# Necessary packages
library(Matrix) # for sparseMatrix()
library(numDeriv) # for jacobian()
library(matrixcalc) # for svd.inverse()
library(ggplot2) # for ggplot()
# Choose data to be imported (in case 'real': date-S-I-D, in case 'simulated': date-S-I-R)
directory_data <- "~/Documents/GitHub/proboder/Data" # directory of data
type <- 'simulated' # set 'real' for real data, 'simulated' for simulated data
region <- 'BE' # 'BE' or 'GE' available (if 'real' data selected)
daily_or_weekly <- 'weekly' # choose either 'daily' or 'weekly' (if 'real' data selected)
# Set model type
model <- if(type == 'simulated'){"SIR"}else{"SID"}
# Import data
data <- load_data(type,region,daily_or_weekly,directory_data)
obs <- data$observations
pop <- data$population
if(type == 'simulated'){
real_beta <- data$real_beta
}
# Sanity check.
head(obs)
summary(obs)
#####################################
########## INITIALIZATION ###########
#####################################
initial_params <- initialization(model,
obs,
beta0 = 0.99,
beta0prime = -2.5,
gamma = 0.4,
eta = 0,
l = 8,
pop)
#####################################
############# ALGORITHM #############
#####################################
# Data grid
data_grid <- obs[,'date']
# ODE grid
ode_grid <- data_grid # no more points than observations
# Overall time grid
time_grid <- sort(unique(c(data_grid, ode_grid)))
# Run inference.
inference_results <- inference(time_grid, obs, initial_params)
X_values <- inference_results$X_values
U_values <- inference_results$U_values
P_X_values <- inference_results$P_X_values
P_U_values <- inference_results$P_U_values
# ------------
# Save results
# ------------
# Specify directory for results
directory_res = "~/Documents/GitHub/proboder/Results"
# Save results to the specified directory
save_results_as_Rdata(X_values, U_values, P_X_values, P_U_values, directory_res)
#####################################
########### VISUALIZATION ###########
#####################################
# ---------------------
# Extract relevant data
# ---------------------
# Load and process data from the specified directory
processed_data <- load_and_process_data(directory_res,time_grid)
U_plot <- processed_data$U_plot
P_plot <- processed_data$P_plot
ymin <- P_plot$ymin
ymax <- P_plot$ymax
U_scaled <- processed_data$U_scaled
Xval <- processed_data$Xval
# Save processed data to the specified directory
save_processed_data(U_plot, P_plot, ymin, ymax, U_scaled, Xval, directory_res)
# Create data frame for real beta values (if available)
if(type=='simulated'){
real_beta_df <- data.frame(time = data_grid, real_beta = real_beta)
}
# --------
# Plotting
# --------
setwd(directory_res)
# Plot data
pdf("SIR-counts.pdf")
plot_data(obs,Xval,model)
dev.off()
plot_data(obs,Xval,model)
# Plot contact rate
pdf("contact-rate-with-CI.pdf")
plot_contact_rate(type, U_plot, ymin, ymax, U_scaled, real_beta_df, gamma, eta, l)
dev.off()
plot_contact_rate(type, U_plot, ymin, ymax, U_scaled, real_beta_df, gamma, eta, l)
initial_params <-
initialization(model, obs,
beta0 = 0.99, beta0prime = -2.5,
gamma = 0.4, eta = 0,
l = 8, pop)
initial_params$e
initial_params$eta
