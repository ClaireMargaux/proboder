#' @param U_plot Data frame containing the processed data for plotting the contact rate.
#' @param P_plot Data frame containing the processed data for plotting the confidence interval of the contact rate.
#' @param ymin Numeric vector containing the minimum values for the confidence interval.
#' @param ymax Numeric vector containing the maximum values for the confidence interval.
#' @param U_scaled Numeric vector containing the scaled contact rate data.
#' @param Xval Data frame containing the states data to be saved as an .RData file.
#' @param directory Character string indicating the directory path where the data files will be saved.
#' @return NULL
#' @export
save_processed_data <- function(U_plot, P_plot, ymin, ymax, U_scaled, Xval, directory){
save(U_plot, file = paste0(directory, "/U_plot.Rdata"))
save(P_plot, file = paste0(directory, "/P_plot.Rdata"))
save(Xval, file = paste0(directory, "/Xval.Rdata"))
beta_with_CI <- data.frame(U_scaled, ymin, ymax)
save(beta_with_CI, file = paste0(directory, "/yminmax.Rdata"))
write.csv(beta_with_CI, file = paste0(directory, "/beta_with_CI.csv"), row.names = FALSE)
}
#' Plot Contact Rate
#'
#' This function generates a plot of the estimated contact rate along with its 95%-confidence interval.
#'
#' @param type Character string indicating the type of data. Must be 'simulated' or 'real'.
#' @param U_plot Data frame containing the estimated contact rate values.
#' @param ymin Numeric vector containing the lower bounds of the confidence interval.
#' @param ymax Numeric vector containing the upper bounds of the confidence interval.
#' @param U_scaled Numeric vector containing the scaled estimated contact rate values.
#' @param real_beta_df Data frame containing the real contact rate values (optional).
#' @param recovery_rate Numeric value indicating the recovery rate.
#' @param fatality_rate Numeric value indicating the fatality rate.
#' @param lengthscale Numeric value indicating the length scale.
#' @return A ggplot object displaying the contact rate plot.
#' @export
plot_contact_rate <- function(type, U_plot, ymin, ymax, U_scaled, real_beta_df = NULL, recovery_rate, fatality_rate, lengthscale) {
if (type == 'simulated') {
ggplot() +
geom_line(data = U_plot, aes(x = time, y = U_scaled, color = "Inferred contact rate"), linewidth = 1) +
geom_line(data = real_beta_df, aes(x = time, y = real_beta, color = "Real (simulated) contact rate"), linetype = "dashed") +
geom_ribbon(data = data.frame(time = U_plot$time, ymin = ymin, ymax = ymax), aes(x = time, ymin = ymin, ymax = ymax, fill = "Error Area"), alpha = 0.5) +
labs(x = "Time", y = "Contact rate", title = "Contact rate with 95%-confidence interval",
color = "Legend") +
scale_color_manual(values = c("Inferred contact rate" = "darkgreen", "Real (simulated) contact rate" = "lightblue4"),
labels = c("Inferred contact rate", "Real (simulated) contact rate"), name = "Lines") +
scale_fill_manual(values = c("Error Area" = "lightgreen"),
labels = "95%-confidence interval", name = "Ribbon") +
theme_minimal() +
theme(legend.position = "top") +
guides(color = guide_legend(order = 1),
fill = guide_legend(order = 2)) +
annotate("text", x = max(U_plot$time), y = max(U_scaled), label = paste("Recovery Rate:", recovery_rate), hjust = 1, vjust = 2, size = 3) +
annotate("text", x = max(U_plot$time), y = max(U_scaled), label = paste("Fatality Rate:", fatality_rate), hjust = 1, vjust = 0, size = 3) +
annotate("text", x = max(U_plot$time), y = max(U_scaled), label = paste("Length Scale:", lengthscale), hjust = 1, vjust = 4, size = 3)
} else {
ggplot() +
geom_line(data = U_plot, aes(x = time, y = U_scaled, color = "Inferred contact rate"), linewidth = 1) +
geom_ribbon(data = data.frame(time = U_plot$time, ymin = ymin, ymax = ymax), aes(x = time, ymin = ymin, ymax = ymax, fill = "Error Area"), alpha = 0.5) +
labs(x = "Time", y = "Contact rate", title = "Contact rate with 95%-confidence interval",
color = "Legend") +
scale_color_manual(values = c("Inferred contact rate" = "darkgreen"),
labels = "Inferred contact rate", name = "Line") +
scale_fill_manual(values = c("Error Area" = "lightgreen"),
labels = "95%-confidence interval", name = "Ribbon") +
theme_minimal() +
theme(legend.position = "top")+
guides(color = guide_legend(order = 1),
fill = guide_legend(order = 2)) +
annotate("text", x = max(U_plot$time), y = max(U_scaled), label = paste("Recovery Rate:", recovery_rate), hjust = 1, vjust = 2, size = 3) +
annotate("text", x = max(U_plot$time), y = max(U_scaled), label = paste("Fatality Rate:", fatality_rate), hjust = 1, vjust = 0, size = 3) +
annotate("text", x = max(U_plot$time), y = max(U_scaled), label = paste("Length Scale:", lengthscale), hjust = 1, vjust = 4, size = 3)
}
}
#' Plot Data
#'
#' This function generates a plot of the observed and inferred compartment counts.
#'
#' @param obs Data frame containing the observed compartment counts.
#' @param Xval Data frame containing the inferred compartment counts.
#' @param model Character string indicating the model type. Must be 'SIR' or 'SID'.
#' @return A ggplot object displaying the observed and inferred compartment counts.
#' @export
plot_data <- function(obs, Xval, model) {
# Adjust variable names and labels based on model
if (model == 'SIR') {
S_var <- 'S'
I_var <- 'I'
R_var <- 'R'
legend_labels <- c("Susceptible", "Infected", "Recovered")
} else if (model == 'SID') {
S_var <- 'S'
I_var <- 'I'
R_var <- 'D'
legend_labels <- c("Susceptible", "Infected", "Deaths")
} else {
stop("Invalid model. Please specify 'SIR' or 'SID'.")
}
plot_title <- "S, I, R and D counts"
# Log-transform values (add a small value to avoid log of zero)
obs[[S_var]] <- log(obs[[S_var]] + 0.01)
obs[[I_var]] <- log(obs[[I_var]] + 0.01)
obs[[R_var]] <- log(obs[[R_var]] + 0.01)
Xval[["S"]] <- log(pmax(Xval[["S"]],0) + 0.01)
Xval[["I"]] <- log(pmax(Xval[["I"]],0) + 0.01)
Xval[["R"]] <- log(pmax(Xval[["R"]],0) + 0.01)
Xval[["D"]] <- log(pmax(Xval[["D"]],0) + 0.01)
cols <- c("S" = "pink",
"I" = "lightblue",
"R" = "lightgreen",
"D" = "darkgreen")
ggplot() +
geom_line(data = obs, aes(x = date, y = .data[[S_var]], color = "S", linetype = "Data"), linewidth = 1) +
geom_line(data = obs, aes(x = date, y = .data[[I_var]], color = "I", linetype = "Data"), linewidth = 1) +
geom_line(data = obs, aes(x = date, y = .data[[R_var]], color = "R", linetype = "Data"), linewidth = 1) +
geom_line(data = Xval, aes(x = time_grid, y = .data[["S"]], color = "S", linetype = "Inferred"), linewidth = 1) +
geom_line(data = Xval, aes(x = time_grid, y = .data[["I"]], color = "I", linetype = "Inferred"), linewidth = 1) +
geom_line(data = Xval, aes(x = time_grid, y = .data[["R"]], color = "R", linetype = "Inferred"), linewidth = 1) +
geom_line(data = Xval, aes(x = time_grid, y = .data[["D"]], color = "D", linetype = "Inferred"), linewidth = 1) +
labs(x = "Date", y = "Count (log-scale)", title = plot_title) +
theme_minimal() +
scale_color_manual(values = cols,
name = "Compartments") +
scale_linetype_manual(values = c("Data" = "dotdash", "Inferred" = "solid"),
name = "Lines",
labels = c("Data (Observed)", "Inferred (Simulated)"),
guide = guide_legend(override.aes = list(color = "grey")))
}
#####################################
############# WORKFLOW ##############
#####################################
# Import functions
source('~/Documents/GitHub/proboder/initialization.R')
source('~/Documents/GitHub/proboder/functions_for_inference.R')
source('~/Documents/GitHub/proboder/saving_loading_plotting.R')
# Necessary packages
library(Matrix) # for sparseMatrix()
library(numDeriv) # for jacobian()
library(matrixcalc) # for svd.inverse()
library(ggplot2) # for ggplot()
# Choose data to be imported (in case 'real': date-S-I-D, in case 'simulated': date-S-I-R)
directory_data <- "~/Documents/GitHub/proboder/Data" # directory of data
type <- 'simulated' # set 'real' for real data, 'simulated' for simulated data
region <- 'BE' # 'BE' or 'GE' available (if 'real' data selected)
daily_or_weekly <- 'weekly' # choose either 'daily' or 'weekly' (if 'real' data selected)
# Set model type
model <- if(type == 'simulated'){"SIR"}else{"SID"}
# Import data
data <- load_data(type,region,daily_or_weekly,directory_data)
obs <- data$observations
pop <- data$population
if(type == 'simulated'){
real_beta <- data$real_beta
}
# Sanity check.
head(obs)
summary(obs)
#####################################
########## INITIALIZATION ###########
#####################################
initial_params <-
initialization(model, obs,
beta0 = 0.99, beta0prime = -2.5,
gamma = 0.4, eta = 0,
l = 4, noise_wiener = 0.1,
pop)
#####################################
############# ALGORITHM #############
#####################################
# Data grid
data_grid <- obs[,'date']
# ODE grid
ode_grid <- data_grid # no more points than observations
# Overall time grid
time_grid <- sort(unique(c(data_grid, ode_grid)))
# Run inference.
inference_results <- inference(time_grid, obs, initial_params)
X_values <- inference_results$X_values
U_values <- inference_results$U_values
P_X_values <- inference_results$P_X_values
P_U_values <- inference_results$P_U_values
# ------------
# Save results
# ------------
# Specify directory for results
directory_res = "~/Documents/GitHub/proboder/Results"
# Save results to the specified directory
save_results_as_Rdata(X_values, U_values, P_X_values, P_U_values, directory_res)
#####################################
########### VISUALIZATION ###########
#####################################
# ---------------------
# Extract relevant data
# ---------------------
# Load and process data from the specified directory
processed_data <- load_and_process_data(directory_res,time_grid)
U_plot <- processed_data$U_plot
P_plot <- processed_data$P_plot
ymin <- P_plot$ymin
ymax <- P_plot$ymax
U_scaled <- processed_data$U_scaled
Xval <- processed_data$Xval
# Save processed data to the specified directory
save_processed_data(U_plot, P_plot, ymin, ymax, U_scaled, Xval, directory_res)
# Create data frame for real beta values (if available)
if(type=='simulated'){
real_beta_df <- data.frame(time = data_grid, real_beta = real_beta)
}
# --------
# Plotting
# --------
setwd(directory_res)
# Plot data
pdf("SIR-counts.pdf", width = 8, height = 6)
plot_data(obs,Xval,model)
dev.off()
plot_data(obs,Xval,model)
eta <- initial_params$eta
gamma <- initial_params$gamma
l <- initial_params$l
# Plot contact rate
pdf("contact-rate-with-CI.pdf", width = 8, height = 6)
plot_contact_rate(type, U_plot, ymin, ymax, U_scaled, real_beta_df, gamma, eta, l)
dev.off()
plot_contact_rate(type, U_plot, ymin, ymax, U_scaled, real_beta_df, gamma, eta, l)
#####################################
############# WORKFLOW ##############
#####################################
# Import functions
source('~/Documents/GitHub/proboder/initialization.R')
source('~/Documents/GitHub/proboder/functions_for_inference.R')
source('~/Documents/GitHub/proboder/saving_loading_plotting.R')
# Necessary packages
library(Matrix) # for sparseMatrix()
library(numDeriv) # for jacobian()
library(matrixcalc) # for svd.inverse()
library(ggplot2) # for ggplot()
# Choose data to be imported (in case 'real': date-S-I-D, in case 'simulated': date-S-I-R)
directory_data <- "~/Documents/GitHub/proboder/Data" # directory of data
type <- 'simulated' # set 'real' for real data, 'simulated' for simulated data
region <- 'BE' # 'BE' or 'GE' available (if 'real' data selected)
daily_or_weekly <- 'weekly' # choose either 'daily' or 'weekly' (if 'real' data selected)
# Set model type
model <- if(type == 'simulated'){"SIR"}else{"SID"}
# Import data
data <- load_data(type,region,daily_or_weekly,directory_data)
obs <- data$observations
pop <- data$population
if(type == 'simulated'){
real_beta <- data$real_beta
}
# Sanity check.
head(obs)
summary(obs)
#####################################
########## INITIALIZATION ###########
#####################################
initial_params <-
initialization(model, obs,
beta0 = 0.99, beta0prime = -2.5,
gamma = 0.4, eta = 0,
l = 4, noise_wiener = 0.1,
pop)
#####################################
############# ALGORITHM #############
#####################################
# Data grid
data_grid <- obs[,'date']
# ODE grid
ode_grid <- data_grid # no more points than observations
# Overall time grid
time_grid <- sort(unique(c(data_grid, ode_grid)))
# Run inference.
inference_results <- inference(time_grid, obs, initial_params)
X_values <- inference_results$X_values
U_values <- inference_results$U_values
P_X_values <- inference_results$P_X_values
P_U_values <- inference_results$P_U_values
# ------------
# Save results
# ------------
# Specify directory for results
directory_res = "~/Documents/GitHub/proboder/Results"
# Save results to the specified directory
save_results_as_Rdata(X_values, U_values, P_X_values, P_U_values, directory_res)
#####################################
########### VISUALIZATION ###########
#####################################
# ---------------------
# Extract relevant data
# ---------------------
# Load and process data from the specified directory
processed_data <- load_and_process_data(directory_res,time_grid)
U_plot <- processed_data$U_plot
P_plot <- processed_data$P_plot
ymin <- P_plot$ymin
ymax <- P_plot$ymax
U_scaled <- processed_data$U_scaled
Xval <- processed_data$Xval
# Save processed data to the specified directory
save_processed_data(U_plot, P_plot, ymin, ymax, U_scaled, Xval, directory_res)
# Create data frame for real beta values (if available)
if(type=='simulated'){
real_beta_df <- data.frame(time = data_grid, real_beta = real_beta)
}
# --------
# Plotting
# --------
setwd(directory_res)
# Plot data
pdf("SIR-counts.pdf", width = 8, height = 6)
plot_data(obs,Xval,model)
dev.off()
plot_data(obs,Xval,model)
eta <- initial_params$eta
gamma <- initial_params$gamma
l <- initial_params$l
# Plot contact rate
pdf("contact-rate-with-CI.pdf", width = 8, height = 6)
plot_contact_rate(type, U_plot, ymin, ymax, U_scaled, real_beta_df, gamma, eta, l)
dev.off()
plot_contact_rate(type, U_plot, ymin, ymax, U_scaled, real_beta_df, gamma, eta, l)
#####################################
############# WORKFLOW ##############
#####################################
# Import functions
source('~/Documents/GitHub/proboder/initialization.R')
source('~/Documents/GitHub/proboder/functions_for_inference.R')
source('~/Documents/GitHub/proboder/saving_loading_plotting.R')
# Necessary packages
library(Matrix) # for sparseMatrix()
library(numDeriv) # for jacobian()
library(matrixcalc) # for svd.inverse()
library(ggplot2) # for ggplot()
# Choose data to be imported (in case 'real': date-S-I-D, in case 'simulated': date-S-I-R)
directory_data <- "~/Documents/GitHub/proboder/Data" # directory of data
type <- 'simulated' # set 'real' for real data, 'simulated' for simulated data
region <- 'BE' # 'BE' or 'GE' available (if 'real' data selected)
daily_or_weekly <- 'weekly' # choose either 'daily' or 'weekly' (if 'real' data selected)
# Set model type
model <- if(type == 'simulated'){"SIR"}else{"SID"}
# Import data
data <- load_data(type,region,daily_or_weekly,directory_data)
obs <- data$observations
pop <- data$population
if(type == 'simulated'){
real_beta <- data$real_beta
}
# Sanity check.
head(obs)
summary(obs)
#####################################
########## INITIALIZATION ###########
#####################################
initial_params <-
initialization(model, obs,
beta0 = 0.99, beta0prime = -2.5,
gamma = 0.4, eta = 0,
l = 4, noise_wiener = 0.1,
pop)
#####################################
############# ALGORITHM #############
#####################################
# Data grid
data_grid <- obs[,'date']
# ODE grid
ode_grid <- data_grid # no more points than observations
# Overall time grid
time_grid <- sort(unique(c(data_grid, ode_grid)))
# Run inference.
inference_results <- inference(time_grid, obs, initial_params)
X_values <- inference_results$X_values
U_values <- inference_results$U_values
P_X_values <- inference_results$P_X_values
P_U_values <- inference_results$P_U_values
# ------------
# Save results
# ------------
# Specify directory for results
directory_res = "~/Documents/GitHub/proboder/Results"
# Save results to the specified directory
save_results_as_Rdata(X_values, U_values, P_X_values, P_U_values, directory_res)
#####################################
########### VISUALIZATION ###########
#####################################
# ---------------------
# Extract relevant data
# ---------------------
# Load and process data from the specified directory
processed_data <- load_and_process_data(directory_res,time_grid)
U_plot <- processed_data$U_plot
P_plot <- processed_data$P_plot
ymin <- P_plot$ymin
ymax <- P_plot$ymax
U_scaled <- processed_data$U_scaled
Xval <- processed_data$Xval
# Save processed data to the specified directory
save_processed_data(U_plot, P_plot, ymin, ymax, U_scaled, Xval, directory_res)
# Create data frame for real beta values (if available)
if(type=='simulated'){
real_beta_df <- data.frame(time = data_grid, real_beta = real_beta)
}
# --------
# Plotting
# --------
setwd(directory_res)
# Plot data
pdf("SIR-counts.pdf", width = 8, height = 6)
plot_data(obs,Xval,model)
dev.off()
plot_data(obs,Xval,model)
eta <- initial_params$eta
gamma <- initial_params$gamma
l <- initial_params$l
# Plot contact rate
pdf("contact-rate-with-CI.pdf", width = 8, height = 6)
plot_contact_rate(type, U_plot, ymin, ymax, U_scaled, real_beta_df, gamma, eta, l)
dev.off()
plot_contact_rate(type, U_plot, ymin, ymax, U_scaled, real_beta_df, gamma, eta, l)
#####################################
############# WORKFLOW ##############
#####################################
# Import functions
source('~/Documents/GitHub/proboder/initialization.R')
source('~/Documents/GitHub/proboder/functions_for_inference.R')
source('~/Documents/GitHub/proboder/saving_loading_plotting.R')
# Necessary packages
library(Matrix) # for sparseMatrix()
library(numDeriv) # for jacobian()
library(matrixcalc) # for svd.inverse()
library(ggplot2) # for ggplot()
# Choose data to be imported (in case 'real': date-S-I-D, in case 'simulated': date-S-I-R)
directory_data <- "~/Documents/GitHub/proboder/Data" # directory of data
type <- 'simulated' # set 'real' for real data, 'simulated' for simulated data
region <- 'BE' # 'BE' or 'GE' available (if 'real' data selected)
daily_or_weekly <- 'weekly' # choose either 'daily' or 'weekly' (if 'real' data selected)
# Set model type
model <- if(type == 'simulated'){"SIR"}else{"SID"}
# Import data
data <- load_data(type,region,daily_or_weekly,directory_data)
obs <- data$observations
pop <- data$population
if(type == 'simulated'){
real_beta <- data$real_beta
}
# Sanity check.
head(obs)
summary(obs)
#####################################
########## INITIALIZATION ###########
#####################################
initial_params <-
initialization(model, obs,
beta0 = 0.99, beta0prime = -2.5,
gamma = 0.4, eta = 0,
l = 4, noise_wiener = 0.1,
pop)
#####################################
############# ALGORITHM #############
#####################################
# Data grid
data_grid <- obs[,'date']
# ODE grid
ode_grid <- data_grid # no more points than observations
# Overall time grid
time_grid <- sort(unique(c(data_grid, ode_grid)))
# Run inference.
inference_results <- inference(time_grid, obs, initial_params)
X_values <- inference_results$X_values
U_values <- inference_results$U_values
P_X_values <- inference_results$P_X_values
P_U_values <- inference_results$P_U_values
# ------------
# Save results
# ------------
# Specify directory for results
directory_res = "~/Documents/GitHub/proboder/Results"
# Save results to the specified directory
save_results_as_Rdata(X_values, U_values, P_X_values, P_U_values, directory_res)
#####################################
########### VISUALIZATION ###########
#####################################
# ---------------------
# Extract relevant data
# ---------------------
# Load and process data from the specified directory
processed_data <- load_and_process_data(directory_res,time_grid)
U_plot <- processed_data$U_plot
P_plot <- processed_data$P_plot
ymin <- P_plot$ymin
ymax <- P_plot$ymax
U_scaled <- processed_data$U_scaled
Xval <- processed_data$Xval
# Save processed data to the specified directory
save_processed_data(U_plot, P_plot, ymin, ymax, U_scaled, Xval, directory_res)
# Create data frame for real beta values (if available)
if(type=='simulated'){
real_beta_df <- data.frame(time = data_grid, real_beta = real_beta)
}
# --------
# Plotting
# --------
setwd(directory_res)
# Plot data
pdf("SIR-counts.pdf", width = 8, height = 6)
plot_data(obs,Xval,model)
dev.off()
plot_data(obs,Xval,model)
eta <- initial_params$eta
gamma <- initial_params$gamma
l <- initial_params$l
# Plot contact rate
pdf("contact-rate-with-CI.pdf", width = 8, height = 6)
plot_contact_rate(type, U_plot, ymin, ymax, U_scaled, real_beta_df, gamma, eta, l)
dev.off()
plot_contact_rate(type, U_plot, ymin, ymax, U_scaled, real_beta_df, gamma, eta, l)
