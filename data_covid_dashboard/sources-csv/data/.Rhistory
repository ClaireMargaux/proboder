d_dbeta <- matrix(
data=c(-S * I / P, S * I / P, 0, 0),
nrow=1, ncol=4
)
sol <- d_dbeta
return(sol)
}
jacobian_X <- function(X,U,pop,gamma,eta){
# Arguments:
#   arg1: X, matrix(nrow=12, ncol=1), solution of the ODE and its 2 first derivatives
#   arg2: U, numeric with values in [0,1], latent parameter of the ODE
#   arg3: pop, integer, total population
#   arg4: gamma, numeric, recovery rate
#   arg5: eta, numeric, fatality rate
#
# Returns:
#   output: matrix(nrow=4, ncol=4), Jacobian of ODE f wrt X0
X0 <- X[1:4]
P <- pop
S <- X0[1]
I <- X0[2]
R <- X0[3]
D <- X0[4]
beta <- U
d_dS <- matrix(
data=c(-beta * I / P, -beta * S / P, 0, 0),
nrow=1, ncol=4
)
d_dI <- matrix(
data=c(beta * I / P, beta * S / P - gamma - eta, 0, 0),
nrow=1, ncol=4
)
d_dR <- matrix(
data=c(0, gamma, 0, 0),
nrow=1, ncol=4
)
d_dD <- matrix(
data=c(0, eta, 0, 0),
nrow=1, ncol=4
)
sol <- rbind(d_dS,d_dI,d_dR,d_dD)
return(sol)
}
# Prediction step.
prediction_U <- function(m_U,P_U,F_U,L_U){
# Arguments:
#   arg1: m_U, numeric, (previous) mean of U
#   arg2: P_U, numeric, (previous) (co)variance of U
#   arg3: F_U, matrix(nrow=2, ncol=2), drif matrix of U
#   arg4: L_U, matrix(nrow=2, ncol=1), dispersion matrix of U
#
# Returns:
#   output: predicted mean and covariance U
exp_F_U <- expm(F_U)
m_U_out <- exp_F_U %*% m_U
top_row_U <- cbind(F_U,L_U %*% t(L_U))
bottom_row_U <- cbind(matrix(0,nrow=2,ncol=2),-t(F_U))
Gamma_U <- rbind(top_row_U,bottom_row_U)
exp_Gamma_U <- expm(Gamma_U)
M_1_U <- exp_Gamma_U[1:2,1:2]
M_2_U <- exp_Gamma_U[1:2,3:4]
B_U <- M_2_U %*% t(M_1_U)
P_U_out <- exp_F_U %*% P_U %*% t(exp_F_U) + B_U
out <- list(m_U_out,P_U_out)
return(out)
}
prediction_X <- function(m_X,P_X,F_X,L_X){
# Arguments:
#   arg1: m_X, vector(nrow=13), (previous) mean of X
#   arg2: P_X, matrix(nrow=12, ncol=12), (previous) covariance of X
#   arg3: F_X, matrix(nrow=12, ncol=12), drif matrix of X
#   arg4: L_X, matrix(nrow=12, ncol=4), drif matrix of X
#
# Returns:
#   output: predicted mean and covariance of X
exp_F_X <- expm(F_X)
m_X_out <- exp_F_X %*% m_X
top_row_X <- cbind(F_X,L_X %*% t(L_X))
bottom_row_X <- cbind(matrix(0,nrow=12,ncol=12),-t(F_X))
Gamma_X <- rbind(top_row_X,bottom_row_X)
exp_Gamma_X <- expm(Gamma_X)
M_1_X <- exp_Gamma_X[1:12,1:12]
M_2_X <- exp_Gamma_X[1:12,13:24]
B_X <- M_2_X %*% t(M_1_X)
P_X_out <- exp_F_X %*% P_X %*% t(exp_F_X) + B_X
out <- list(m_X_out,P_X_out)
return(out)
}
# Update step on tau_OBS.
update_of_observations <- function(m,P,y,H,R){
# Arguments:
#   arg1: m, vector(nrow=14), predicted mean of U and X
#   arg2: P, matrix(nrow=14, ncol=14), predicted covariance of U and X
#   arg3: y, vector(nrow=3), observations
#   arg4: H, matrix(nrow=3, ncol=14), observation matrix
#   arg5: R, matrix(nrow=3, ncol=3), observation noise
#
# Returns:
#   output: vector(ncol=14) and matrix(nrow=14, ncol=14), updated
#           mean and covariances of U and X
v <- y - H %*% m # residual
S <- H %*% P %*% t(H) + R # innovation covariance
S_inv <- svd.inverse(S)
K <- P %*% t(H) %*% S_inv # Kalman gain
m_out <- m + K %*% v # updated mean
P_out <- P - K %*% S %*% t(K) # updated covariance
out <- list(m_out,P_out)
return(out)
}
# Update step on tau_ODE.
update_of_states <- function(m,P,h,J){
# Arguments:
#   arg1: m, vector(nrow=14), predicted mean of U and X
#   arg2: P, matrix(nrow=14, ncol=14), predicted covariance of U and X
#   arg3, h, vector(nrow=4), measurement model
#   arg4: J, matrix(nrow=4, ncol=14), Jacobian of the measurement model
#
# Returns:
#   output: vector(ncol=14) and matrix(nrow=14, ncol=14), updated
#           mean and covariances of U and X
v <- -h # residual
S <- J %*% P %*% t(J) # innovation covariance
S_inv <- svd.inverse(S)
K <- P %*% t(J) %*% S_inv # Kalman gain
m_out <- m + K %*% v # updated mean
P_out <- P - K %*% S %*% t(K) # updated covariance
out <- list(m_out,P_out)
return(out)
}
matrix_P <- function(P_X,P_U){
# Arguments:
#   arg1: P_X, matrix(nrow=12, ncol=12), predicted covariance of X
#   arg2: P_U, matrix(nrow=2, ncol=2), predicted covariance of U
#
# Returns:
#   output: matrix(nrow=14, ncol=14), predicted covariance of X and U
P_X <- as.matrix(P_X)
P_U <- as.matrix(P_U)
nrow_P <- nrow(P_X) + nrow(P_U)
ncol_P <- ncol(P_X) + ncol(P_U)
P <- matrix(0, nrow = nrow_P, ncol = ncol_P)
P[1:nrow(P_X), 1:ncol(P_X)] <- P_X  # Top left corner
P[(nrow_P - nrow(P_U) + 1):nrow_P, (ncol_P - ncol(P_U) + 1):ncol_P] <- P_U  # Bottom right corner
return(P)
}
#####################################
########## INITIALIZATION ###########
#####################################
# Choice of data (in any case: date-S-I-D data).
type <- 'simulated' # set 'real' for real data, 'simulated' for simulated data
if (type == 'simulated'){
obs <- observations_simulate
}else{
obs <- observations
}
# X: solution of SIRD-ODE and its two first derivatives
X <- as.vector(c(data= c(obs[1,2],rep(0,11))))
# U: latent parameter (contact rate) and its first derivative
U <- as.vector(c(0,0))
# P: total population
if (type == 'simulated'){
pop <- population_simulate
}else{
pop <- population
}
library(Matrix)
library(numDeriv)
library(matrixcalc)
#' @param recovery_rate
#' @param fatality_rate
#' @param length_scale
#' @return contact_rate
# Fixed parameters.
gamma <- 0.06 # recovery_rate
eta <- 0.002 # fatality_rate
l <- 14 # length_scale
# Drift matrices.
F_U <- matrix(c(0,-(sqrt(3)/l)^2,1,-2*sqrt(3)/l), nrow = 2, ncol = 2)
F_X <- sparseMatrix(i = 1:8, j = 5:12, x = 1, dims = c(12,12))
F_X <- as.matrix(F_X)
# Dispersion matrices.
L_U <- matrix(c(0,1), nrow = 2, ncol = 1)
L_X <- sparseMatrix(i = 9:12, j = 1:4, x = 1, dims = c(12,4))
L_X <- as.matrix(L_X)
# Observation matrix (for observation of S,I and D).
H <- sparseMatrix(i = c(1,2,3), j = c(1,2,4), x = 1, dims = c(3,14))
H <- as.matrix(H)
# Observation noise.
R <- matrix(0.001, nrow = 3, ncol = 3)
# Noise of priors.
P_X <- matrix(0.001, nrow = 12, ncol = 12)
P_U <- matrix(0.001, nrow = 2, ncol = 2)
#####################################
############# ALGORITHM #############
#####################################
# Data grid.
data_grid <- obs[,'date']
# ODE grid.
ode_grid <- data_grid # more points could be added
# Overall time grid.
time_grid <- sort(unique(c(data_grid, ode_grid)))
# 'Artificial' observations for ODE measurements
zero_data = rep(x=0, 4)
data_idx <- 0
ode_idx <- 0
# Arrays to store values of X, P_X and U, P_U.
X_values <- matrix(data = NA, nrow = 12, ncol = length(time_grid))
U_values <- matrix(data = NA, nrow = 2, ncol = length(time_grid))
P_X_values <- array(data = NA, dim = c(12, 12, length(time_grid)))
P_U_values <- array(data = NA, dim = c(2, 2, length(time_grid)))
for (loc in time_grid){
X_values[,loc] <- as.vector(X)
U_values[,loc] <- as.vector(U)
P_X_values[,,loc] <- as.matrix(P_X)
P_U_values[,,loc] <- as.matrix(P_U)
# Prediction step.
U <- as.vector(prediction_U(m_U=U,P_U=P_U,F_U=F_U,L_U=L_U)[[1]])
P_U <- as.matrix(prediction_U(m_U=U,P_U=P_U,F_U=F_U,L_U=L_U)[[2]])
X <- as.vector(prediction_X(m_X=X,P_X=P_X,F_X=F_X,L_X=L_X)[[1]])
P_X <- as.matrix(prediction_X(m_X=X,P_X=P_X,F_X=F_X,L_X=L_X)[[2]])
# Update of observations.
if (any(data_grid == loc)){
m <- as.vector(c(X,U))
P <- matrix_P(P_X,P_U)
y <- obs[which(obs[, 1] == loc),2:4]
X <- as.vector(update_of_observations(m,P,y,H,R)[[1]][1:12])
U <- as.vector(update_of_observations(m,P,y,H,R)[[1]][13:14])
P_X <- as.matrix(update_of_observations(m,P,y,H,R)[[2]][1:12,1:12])
P_U <- as.matrix(update_of_observations(m,P,y,H,R)[[2]][13:14,13:14])
}
# Update of states.
if (any(ode_grid == loc)){
P <- matrix_P(P_X,P_U)
J <- jacobian_measurement(X,U,pop,gamma,eta)
m <- c(X,U)
h_val <- h(X,U,pop,gamma,eta)
X <- as.vector(update_of_states(m,P,h_val,J)[[1]][1:12])
U <- as.vector(update_of_states(m,P,h_val,J)[[1]][13:14])
P_X <- as.matrix(update_of_states(m,P,h_val,J)[[2]][1:12,1:12])
P_U <- as.matrix(update_of_states(m,P,h_val,J)[[2]][13:14,13:14])
}
}
X_values
U_values
U[1,]
U_values[1,]
P_U_values
P_U_values[1,1,]
# Extract relevant data
U_values_plot <- data.frame(time = time_grid, U_value = U_values[1, ])
P_U_values_plot <- data.frame(
time = rep(time_grid, each = 2),
ymin = U_values[1, ] - sqrt(P_U_values[1, 1, ]),
ymax = U_values[1, ] + sqrt(P_U_values[1, 1, ])
)
# Plotting
ggplot() +
geom_point(data = U_values_plot, aes(x = time, y = U_value), color = "blue", size = 2) +
geom_errorbar(data = P_U_values_plot, aes(x = time, ymin = ymin, ymax = ymax), color = "red", width = 0.2) +
labs(x = "Time", y = "U_values[1,]", title = "U_values[1,] with Error Bars") +
theme_minimal()
#####################################
################ PLOT ###############
#####################################
library(ggplot2)
# Extract relevant data
U_values_plot <- data.frame(time = time_grid, U_value = U_values[1, ])
P_U_values_plot <- data.frame(
time = rep(time_grid, each = 2),
ymin = U_values[1, ] - sqrt(P_U_values[1, 1, ]),
ymax = U_values[1, ] + sqrt(P_U_values[1, 1, ])
)
# Plotting
ggplot() +
geom_point(data = U_values_plot, aes(x = time, y = U_value), color = "blue", size = 2) +
geom_errorbar(data = P_U_values_plot, aes(x = time, ymin = ymin, ymax = ymax), color = "red", width = 0.2) +
labs(x = "Time", y = "U_values[1,]", title = "U_values[1,] with Error Bars") +
theme_minimal()
# Plotting
ggplot() +
geom_point(data = U_values_plot, aes(x = time, y = U_value), color = "blue", size = 2) +
geom_errorbar(data = P_U_values_plot, aes(x = time, ymin = ymin, ymax = ymax), color = "red", width = 0.2) +
labs(x = "Time", y = "Contact rate", title = "Contact rate with Error Bars") +
theme_minimal()
# Plotting
ggplot() +
geom_point(data = U_values_plot, aes(x = time, y = U_value), color = "darkgreen", size = 2) +
geom_errorbar(data = P_U_values_plot, aes(x = time, ymin = ymin, ymax = ymax), color = "coral", width = 0.2) +
labs(x = "Time", y = "Contact rate", title = "Contact rate with Error Bars") +
theme_minimal()
# Extract relevant data
U_values_plot <- data.frame(time = time_grid, U_value = U_values[1, ])
P_U_values_plot <- data.frame(
time = time_grid,
ymin = U_values[1, ] - sqrt(P_U_values[1, 1, ]),
ymax = U_values[1, ] + sqrt(P_U_values[1, 1, ])
)
# Plotting
ggplot() +
geom_point(data = U_values_plot, aes(x = time, y = U_value), color = "darkgreen", size = 2) +
geom_errorbar(data = P_U_values_plot, aes(x = time, ymin = ymin, ymax = ymax), color = "coral", width = 0.2) +
labs(x = "Time", y = "Contact rate", title = "Contact rate with Error Bars") +
theme_minimal()
# Plotting
ggplot() +
geom_line(data = U_values_plot, aes(x = time, y = U_value), color = "darkgreen", size = 1) +
geom_ribbon(data = P_U_values_plot, aes(x = time, ymin = ymin, ymax = ymax), fill = "coral", alpha = 0.5) +
labs(x = "Time", y = "Contact rate", title = "Contact rate with Error Area") +
theme_minimal()
real_beta
# Plotting
ggplot() +
geom_line(data = U_values_plot, aes(x = time, y = U_value), color = "darkgreen", size = 1) +
geom_ribbon(data = P_U_values_plot, aes(x = time, ymin = ymin, ymax = ymax), fill = "coral", alpha = 0.5) +
geom_hline(yintercept = real_beta, linetype = "dashed", color = "blue") +
labs(x = "Time", y = "Contact rate", title = "Contact rate with Error Area") +
theme_minimal()
# Plotting
ggplot() +
geom_line(data = U_values_plot, aes(x = time, y = U_value), color = "darkgreen", size = 1) +
geom_ribbon(data = P_U_values_plot, aes(x = time, ymin = ymin, ymax = ymax), fill = "coral", alpha = 0.5) +
geom_line(data = real_beta, linetype = "dashed", color = "blue") +
labs(x = "Time", y = "Contact rate", title = "Contact rate with Error Area") +
theme_minimal()
# Plotting
ggplot() +
geom_line(data = U_values_plot, aes(x = time, y = U_value), color = "darkgreen", size = 1) +
geom_ribbon(data = P_U_values_plot, aes(x = time, ymin = ymin, ymax = ymax), fill = "coral", alpha = 0.5) +
geom_line(data = real_beta, linetype = "dashed", color = "blue") +
labs(x = "Time", y = "Contact rate", title = "Contact rate with Error Area") +
theme_minimal()
# Plotting
ggplot() +
geom_line(data = U_values_plot, aes(x = time, y = U_value), color = "darkgreen", size = 1) +
geom_ribbon(data = P_U_values_plot, aes(x = time, ymin = ymin, ymax = ymax), fill = "coral", alpha = 0.5) +
geom_line(data = real_beta_df, aes(x = time, y = real_beta), color = "blue", linetype = "dashed") +
labs(x = "Time", y = "Contact rate", title = "Contact rate with Error Area") +
theme_minimal()
P_U_values_plot <- data.frame(
time = time_grid,
ymin = U_values[1, ] - sqrt(P_U_values[1, 1, ]),
ymax = U_values[1, ] + sqrt(P_U_values[1, 1, ])
)
real_beta_df <- data.frame(time = time_grid, real_beta = real_beta)
# Plotting
ggplot() +
geom_line(data = U_values_plot, aes(x = time, y = U_value), color = "darkgreen", size = 1) +
geom_ribbon(data = P_U_values_plot, aes(x = time, ymin = ymin, ymax = ymax), fill = "coral", alpha = 0.5) +
geom_line(data = real_beta_df, aes(x = time, y = real_beta), color = "blue", linetype = "dashed") +
labs(x = "Time", y = "Contact rate", title = "Contact rate with Error Area") +
theme_minimal()
real_beta
# Plotting
ggplot() +
geom_line(data = U_values_plot, aes(x = time, y = U_value), color = "darkgreen", size = 1) +
geom_ribbon(data = P_U_values_plot, aes(x = time, ymin = ymin, ymax = ymax), fill = "coral", alpha = 0.5) +
geom_line(data = real_beta_df, aes(x = time, y = real_beta), color = "lightblue", linetype = "dashed") +
labs(x = "Time", y = "Contact rate", title = "Contact rate with Error Area") +
theme_minimal()
# Plotting
ggplot() +
geom_line(data = U_values_plot, aes(x = time, y = U_value), color = "darkgreen", size = 1) +
geom_ribbon(data = P_U_values_plot, aes(x = time, ymin = ymin, ymax = ymax), fill = "coral", alpha = 0.5) +
geom_line(data = real_beta_df, aes(x = time, y = real_beta), color = "lightblue", linetype = "dashed") +
labs(x = "Time", y = "Contact rate", title = "Contact rate") +
theme_minimal()
# Plotting
ggplot() +
geom_line(data = U_values_plot, aes(x = time, y = U_value, color = "Estimated Contact Rate"), size = 1) +
geom_ribbon(data = P_U_values_plot, aes(x = time, ymin = ymin, ymax = ymax), fill = "coral", alpha = 0.5) +
geom_line(data = real_beta_df, aes(x = time, y = real_beta, color = "Real Contact Rate"), linetype = "dashed") +
labs(x = "Time", y = "Contact rate", title = "Contact rate with Error Area") +
scale_color_manual(values = c("Estimated Contact Rate" = "darkgreen", "Real Contact Rate" = "lightblue")) +
theme_minimal() +
theme(legend.position = "top")
# Plotting
ggplot() +
geom_line(data = U_values_plot, aes(x = time, y = U_value, color = "Estimated Contact Rate"), size = 1) +
geom_ribbon(data = P_U_values_plot, aes(x = time, ymin = ymin, ymax = ymax), fill = "coral", alpha = 0.5) +
geom_line(data = real_beta_df, aes(x = time, y = real_beta, color = "Real Contact Rate"), linetype = "dashed") +
labs(x = "Time", y = "Contact rate", title = "Contact rate with Error Area",
color = "Legend") +  # Provide a generic legend title
scale_color_manual(values = c("Estimated Contact Rate" = "darkgreen", "Real Contact Rate" = "blue"),
labels = c("Estimated Contact Rate", "Real Contact Rate")) +  # Specify legend labels
theme_minimal() +
theme(legend.position = "top")  # Adjust legend position
# Extract relevant data
U_values_plot <- data.frame(time = time_grid, U_value = U_values[1, ])
P_U_values_plot <- data.frame(
time = time_grid,
ymin = U_values[1, ] - sqrt(P_U_values[1, 1, ]),
ymax = U_values[1, ] + sqrt(P_U_values[1, 1, ])
)
real_beta_df <- data.frame(time = time_grid, real_beta = real_beta)
# Plotting
ggplot() +
geom_line(data = U_values_plot, aes(x = time, y = U_value, color = "Estimated Contact Rate"), size = 1) +
geom_ribbon(data = P_U_values_plot, aes(x = time, ymin = ymin, ymax = ymax), fill = "coral", alpha = 0.5) +
geom_line(data = real_beta_df, aes(x = time, y = real_beta, color = "Real Contact Rate"), linetype = "dashed") +
labs(x = "Time", y = "Contact rate", title = "Contact rate with Error Area",
color = "Legend") +
scale_color_manual(values = c("Estimated Contact Rate" = "darkgreen", "Real Contact Rate" = "lightblue"),
labels = c("Estimated Contact Rate", "Real Contact Rate")) +  # Specify legend labels
theme_minimal() +
theme(legend.position = "top")
# Plotting
ggplot() +
geom_line(data = U_values_plot, aes(x = time, y = U_value, color = "Estimated Contact Rate"), size = 1) +
geom_ribbon(data = P_U_values_plot, aes(x = time, ymin = ymin, ymax = ymax), fill = "lightgreen", alpha = 0.5) +
geom_line(data = real_beta_df, aes(x = time, y = real_beta, color = "Real Contact Rate"), linetype = "dashed") +
labs(x = "Time", y = "Contact rate", title = "Contact rate with Error Area",
color = "Legend") +
scale_color_manual(values = c("Estimated Contact Rate" = "darkgreen", "Real Contact Rate" = "lightblue4"),
labels = c("Estimated Contact Rate", "Real Contact Rate")) +  # Specify legend labels
theme_minimal() +
theme(legend.position = "top")
# Extract relevant data
P_U_values_plot <- data.frame(
time = time_grid,
ymin = U_values[1, ] - sqrt(P_U_values[1, 1, ]),
ymax = U_values[1, ] + sqrt(P_U_values[1, 1, ])
)
# Extract relevant data
# Extract relevant data
U_values_plot <- data.frame(time = time_grid, U_value = U_values[2,])
P_U_values_plot <- data.frame(
time = time_grid,
ymin = U_values[1, ] - sqrt(P_U_values[1, 1, ]),
ymax = U_values[1, ] + sqrt(P_U_values[1, 1, ])
)
real_beta_df <- data.frame(time = time_grid, real_beta = real_beta)
# Plotting
ggplot() +
geom_line(data = U_values_plot, aes(x = time, y = U_value, color = "Estimated Contact Rate"), size = 1) +
geom_ribbon(data = P_U_values_plot, aes(x = time, ymin = ymin, ymax = ymax), fill = "lightgreen", alpha = 0.5) +
geom_line(data = real_beta_df, aes(x = time, y = real_beta, color = "Real Contact Rate"), linetype = "dashed") +
labs(x = "Time", y = "Contact rate", title = "Contact rate with Error Area",
color = "Legend") +
scale_color_manual(values = c("Estimated Contact Rate" = "darkgreen", "Real Contact Rate" = "lightblue4"),
labels = c("Estimated Contact Rate", "Real Contact Rate")) +  # Specify legend labels
theme_minimal() +
theme(legend.position = "top")
# Extract relevant data
U_plot <- data.frame(time = time_grid, U_value = U_values[1,])
P_plot <- data.frame(
time = time_grid,
ymin = U_values[1, ] - sqrt(P_U_values[1, 1, ]),
ymax = U_values[1, ] + sqrt(P_U_values[1, 1, ])
)
real_beta_df <- data.frame(time = time_grid, real_beta = real_beta)
# Plotting
ggplot() +
geom_line(data = U_plot, aes(x = time, y = U_value, color = "Estimated Contact Rate"), size = 1) +
geom_ribbon(data = P_plot, aes(x = time, ymin = ymin, ymax = ymax), fill = "lightgreen", alpha = 0.5) +
geom_line(data = real_beta_df, aes(x = time, y = real_beta, color = "Real Contact Rate"), linetype = "dashed") +
labs(x = "Time", y = "Contact rate", title = "Contact rate with Error Area",
color = "Legend") +
scale_color_manual(values = c("Estimated Contact Rate" = "darkgreen", "Real Contact Rate" = "lightblue4"),
labels = c("Estimated Contact Rate", "Real Contact Rate")) +  # Specify legend labels
theme_minimal() +
theme(legend.position = "top")
# Extract relevant data
U_plot <- data.frame(time = time_grid, U_value = sigmoid(U_values[1,]))
P_plot <- data.frame(
time = time_grid,
ymin = U_values[1, ] - sqrt(P_U_values[1, 1, ]),
ymax = U_values[1, ] + sqrt(P_U_values[1, 1, ])
)
real_beta_df <- data.frame(time = time_grid, real_beta = real_beta)
# Plotting
ggplot() +
geom_line(data = U_plot, aes(x = time, y = U_value, color = "Estimated Contact Rate"), size = 1) +
geom_ribbon(data = P_plot, aes(x = time, ymin = ymin, ymax = ymax), fill = "lightgreen", alpha = 0.5) +
geom_line(data = real_beta_df, aes(x = time, y = real_beta, color = "Real Contact Rate"), linetype = "dashed") +
labs(x = "Time", y = "Contact rate", title = "Contact rate with Error Area",
color = "Legend") +
scale_color_manual(values = c("Estimated Contact Rate" = "darkgreen", "Real Contact Rate" = "lightblue4"),
labels = c("Estimated Contact Rate", "Real Contact Rate")) +  # Specify legend labels
theme_minimal() +
theme(legend.position = "top")
# Extract relevant data
U_scaled <- sigmoid(U_values[1,])
U_plot <- data.frame(time = time_grid, U_value = U_scaled)
P_plot <- data.frame(
time = time_grid,
ymin = U_scaled - sqrt(P_U_values[1, 1, ]),
ymax = U_scaled + sqrt(P_U_values[1, 1, ])
)
real_beta_df <- data.frame(time = time_grid, real_beta = real_beta)
# Plotting
ggplot() +
geom_line(data = U_plot, aes(x = time, y = U_value, color = "Estimated Contact Rate"), size = 1) +
geom_ribbon(data = P_plot, aes(x = time, ymin = ymin, ymax = ymax), fill = "lightgreen", alpha = 0.5) +
geom_line(data = real_beta_df, aes(x = time, y = real_beta, color = "Real Contact Rate"), linetype = "dashed") +
labs(x = "Time", y = "Contact rate", title = "Contact rate with Error Area",
color = "Legend") +
scale_color_manual(values = c("Estimated Contact Rate" = "darkgreen", "Real Contact Rate" = "lightblue4"),
labels = c("Estimated Contact Rate", "Real Contact Rate")) +  # Specify legend labels
theme_minimal() +
theme(legend.position = "top")
# Plotting
ggplot() +
geom_line(data = U_plot, aes(x = time, y = U_value, color = "Estimated Contact Rate"), size = 1) +
geom_ribbon(data = P_plot, aes(x = time, ymin = ymin, ymax = ymax), fill = "lightgreen", alpha = 0.5) +
geom_line(data = real_beta_df, aes(x = time, y = real_beta, color = "Real Contact Rate"), linetype = "dashed") +
labs(x = "Time", y = "Contact rate", title = "Contact rate with Error Area",
color = "Legend") +
scale_color_manual(values = c("Estimated Contact Rate" = "darkgreen", "Real Contact Rate" = "lightblue4"),
labels = c("Estimated Contact Rate", "Real Contact Rate")) +  # Specify legend labels
coord_cartesian(ylim = c(-1, 2)) +
theme_minimal() +
theme(legend.position = "top")
